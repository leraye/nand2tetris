// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen, bitArray;
    static boolean currColor;
    static int WIDTH, SIZE;

    /** Initializes the Screen. */
    function void init() {
        var int i, curr;

        let screen = 16384;
        let currColor = true;
        let WIDTH = 32;
        let SIZE = 24576 - 16384;

        let bitArray = Array.new(16);
        let i = 0;
        let curr = 1;
        while(i < 16){
            let bitArray[i] = curr;
            let curr = curr + curr;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while(i < SIZE){
            let screen[i] = false;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int mask, pos;

        let mask = bitArray[x & 15];
        let pos = y * WIDTH + (x / 16);
        if(currColor){
            let screen[pos] = screen[pos] | mask;
        }else{
            let screen[pos] = screen[pos] & ~mask;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int tempX, tempY, dx, dy, a, b;

        if(x1 = x2){
            do Screen.drawVerticalLine(x1, Math.min(y1, y2), Math.max(y1, y2));
            return;
        }
        if(y1 = y2){
            do Screen.drawHorizontalLine(y1, Math.min(x1, x2), Math.max(x1, x2));
            return;
        }
        if(y1 > y2){
            let tempX = x1;
            let x1 = x2;
            let x2 = tempX;
            let tempY = y1;
            let y1 = y2;
            let y2 = tempY;
        }
        let dx = Math.abs(x2 - x1);
        let dy = y2 - y1;
        let tempY = 0;
        let tempX = 0;
        let a = 0;
        let b = 0;
        if(x1 < x2){
            while(~(a > dx) & ~(b > dy)){
                do Screen.drawPixel(x1, y1);
                if(tempX < tempY){
                    let b = b + 1;
                    let y1 = y1 + 1;
                    let tempX = tempX + dx;
                }else{
                    let a = a + 1;
                    let x1 = x1 + 1;
                    let tempY = tempY + dy;
                }
            }
        }else{
            while(~(a > dx) & ~(b > dy)){
                do Screen.drawPixel(x1, y1);
                if(tempX < tempY){
                    let b = b + 1;
                    let y1 = y1 + 1;
                    let tempX = tempX + dx;
                }else{
                    let a = a + 1;
                    let x1 = x1 - 1;
                    let tempY = tempY + dy;
                }
            }
        }
        return;
    }

    function void drawHorizontalLine(int y, int x1, int x2){
        var int pos, res;

        let pos = y * WIDTH + (x1 / 16);
        let res = x1 & 15;
        while(~(x1 > x2)){
            if(res = 16){
                let pos = pos + 1;
                let res = 0;
            }
            if(currColor){
                let screen[pos] = screen[pos] | bitArray[res];
            }else{
                let screen[pos] = screen[pos] & ~bitArray[res];
            }
            let x1 = x1 + 1;
            let res = res + 1;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2){
        var int mask, pos;

        let mask = bitArray[x & 15];
        let pos = y1 * WIDTH + (x / 16);
        while(~(y1 > y2)){
            if(currColor){
                let screen[pos] = screen[pos] | mask;
            }else{
                let screen[pos] = screen[pos] & ~mask;
            }
            let y1 = y1 + 1;
            let pos = pos + WIDTH;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while(~(y1 > y2)){
            do Screen.drawHorizontalLine(y1, x1, x2);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, r_square, dy_square, dy, x1, x2;

        let dy = 1;
        let r_square = r * r;
        let dy_square = 1;
        while(~(dy > r)){
            let dx = Math.sqrt(r_square - dy_square);
            let x1 = x - dx;
            let x2 = x + dx;
            do Screen.drawHorizontalLine(y - dy, x1, x2);
            do Screen.drawHorizontalLine(y + dy, x1, x2);
            let dy_square = dy_square + 1 + (2 * dy);
            let dy = dy + 1;
        }
        do Screen.drawHorizontalLine(y, x - r, x + r);
        return;
    }
}
