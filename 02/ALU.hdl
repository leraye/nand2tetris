// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Not16(in[0..15]=true, out[0..15]=ConstantZero);
   
   Mux16(a[0..15]=x[0..15], b[0..15]=ConstantZero, sel=zx, out[0..15]=outX);

   Not16(in[0..15]=outX, out[0..15]=NotX);
   Mux16(a[0..15]=outX, b[0..15]=NotX, sel=nx, out[0..15]=FinalX);

   Mux16(a[0..15]=y[0..15], b[0..15]=ConstantZero, sel=zy, out[0..15]=outY);

   Not16(in[0..15]=outY, out[0..15]=NotY);
   Mux16(a[0..15]=outY, b[0..15]=NotY, sel=ny, out[0..15]=FinalY);

   Add16(a[0..15]=FinalX, b[0..15]=FinalY, out[0..15]=XPlusY);
   And16(a[0..15]=FinalX, b[0..15]=FinalY, out[0..15]=XAndY);
   Mux16(a[0..15]=XAndY, b[0..15]=XPlusY, sel=f, out[0..15]=Out);

   Not16(in[0..15]=Out, out[0..15]=NotOut);
   Mux16(a[0..15]=Out, b[0..15]=NotOut, sel=no, out[0..15]=out[0..15], 
   		       out[0..7]=first, out[8..15]=second, out[15]=s15);

   Or8Way(in[0..7]=first, out=o1);
   Not(in=o1, out=o7);
   Or8Way(in[0..7]=second, out=o2);
   Mux(a=o7, b=false, sel=o2, out=zr);
   

   Mux(a=false, b=true, sel=s15, out=ng);
}