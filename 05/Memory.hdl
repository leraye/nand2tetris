// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    Not16(in[14]=true, in[0..13]=false, in[15]=false, out[0..15]=notS);
    Add16(a[0..15]=notS, b[0]=true, b[1..15]=false, out[0..15]=negS);
    Add16(a[0..15]=negS, b[0..14]=address[0..14], b[15]=false, out[0..15]=offsetS, out[15]=selM);

    Not16(in[13..14]=true, in[0..12]=false, in[15]=false, out[0..15]=notK);
    Add16(a[0..15]=notK, b[0]=true, b[1..15]=false, out[0..15]=negK);
    Add16(a[0..15]=negK, b[0..14]=address[0..14], b[15]=false, out[0..15]=offsetK, out[15]=selS);

    Mux4Way16(a[0..15]=false, b[0..15]=false, c[0..15]=offsetS, d[0..14]=address[0..14], d[15]=false,
    		sel[0]=selM, sel[1]=selS, out[0..12]=addrScr, out[0..13]=addrM);

    And(a=load, b=selM, out=loadM);
    Not(in=selM, out=notselM);
    And(a=load, b=notselM, out=loadScr);
    RAM16K(in[0..15]=in[0..15], load=loadM, address[0..13]=addrM, out[0..15]=outM);
    Screen(in[0..15]=in[0..15], load=loadScr, address[0..12]=addrScr, out[0..15]=outScr);
    Keyboard(out[0..15]=outKb);

    Mux4Way16(a[0..15]=outKb, b[0..15]=outKb, c[0..15]=outScr, d[0..15]=outM,
    		sel[0]=selM, sel[1]=selS, out[0..15]=out[0..15]);
}